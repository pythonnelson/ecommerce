from django.db import models
from django_countries.fields import CountryField
from UserServices.models import Users
from ProductServices.models import *
from OrderServices.models import *
from . choices import *

class Warehouse(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255, unique=True, blank=True, null=True)
    address = models.TextField()
    city = models.CharField(max_length=255)
    state = models.CharField(max_length=255)
    pincode = models.CharField(max_length=10)
    country = CountryField(blank_label="(select country)")
    warehouse_manager_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name="warehouse_manager_id")
    phone = models.CharField(max_length=15, unique=True)
    status = models.CharField(max_length=100, blank=True, null=True, choices=WAREHOUSE_CHOICES)
    size = models.CharField(max_length=100, blank=True, null=True, choices=WAREHOUSE_SIZES)
    capacity = models.CharField(max_length=255, choices=WAREHOUSE_CAPACITY)
    warehouse_type = models.CharField(max_length=255, choices=WAREHOUSE_TYPE)
    additonal_details = models.JSONField()
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_warehouse')
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_id_warehouse')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class RackAndShelvesAndFloor(models.Model):
    id = models.AutoField(primary_key=True)
    warehouse_id = models.ForeignKey(Warehouse, on_delete=models.CASCADE, related_name='warehouse_id_rack_shelf_floor')
    name = models.CharField(max_length=255, blank=True, null=True)
    rack = models.CharField(max_length=255, blank=True, null=True)
    shelf = models.CharField(max_length=255, blank=True, null=True)
    floor = models.CharField(max_length=255, blank=True, null=True)
    additional_details = models.TextField()
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_rack_shelf_floor')
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_id_rack_shelf_floor')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Inventory(models.Model):
    id = models.AutoField(primary_key=True)
    warehouse_id = models.ForeignKey(Warehouse, on_delete=models.CASCADE, related_name='warehouse_id')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='product_inventory')
    purchase_order_id = models.ForeignKey("PurchaseOrder", on_delete=models.CASCADE, related_name='purchase_order_id_inventory')
    purchase_order_item_id = models.ForeignKey("PurchaseOrderItem", on_delete=models.CASCADE, related_name='purchase_order_item_id_inventory')
    purchase_order_item_inwarded_id = models.ForeignKey("PurchaseOrderItemInwardedLog", on_delete=models.CASCADE, related_name='purchase_order_item_inwarded_id_inventory')
    quantity = models.IntegerField()
    mrp = models.CharField(max_length=255, blank=True, null=True)
    batch_number = models.CharField(max_length=255, blank=True, null=True)
    discount_type = models.CharField(max_length=255, blank=True, null=True, choices=DISCOUNT_TYPE)
    discount_amount = models.FloatField()
    sr_number = models.CharField(max_length=255, blank=True, null=True)
    mfg_date = models.DateTimeField(null=True, blank=True)
    uom = models.CharField(max_length=255)
    ptr = models.CharField(max_length=255, blank=True, null=True)
    received_date = models.DateTimeField(null=True, blank=True)
    expiry_date = models.DateTimeField(null=True, blank=True)
    quantity_inwarded = models.IntegerField()
    buy_price = models.DecimalField(max_digits=10, decimal_places=2)
    sell_price = models.DecimalField(max_digits=10, decimal_places=2)
    tax_percentage = models.DecimalField(max_digits=10, decimal_places=2)
    rack_shelf_floor_id = models.ForeignKey(RackAndShelvesAndFloor, on_delete=models.CASCADE, related_name='rack_shelf_floor_id_inventory')
    stock_status = models.CharField(max_length=100, choices=INVENTORY_STATUS, default='Available')
    inward_type = models.CharField(max_length=100, choices=INWARD_TYPE, default='Purchased')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_inventory')
    additional_details = models.JSONField()
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_id_inventory')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class InventoryLog(models.Model):
    id = models.AutoField(primary_key=True)
    warehouse = models.ForeignKey(Warehouse, on_delete=models.CASCADE, related_name='warehouse_inventory_log')
    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE, related_name='inventory_log')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='product_inventory_log')
    sales_order = models.ForeignKey(SaleOrder, on_delete=models.CASCADE, related_name='sales_order_inventory_log')
    rack_shelf_floor_id = models.ForeignKey(RackAndShelvesAndFloor, on_delete=models.CASCADE, related_name='rack_shelf_floor_id_inventory_log')
    quantity = models.IntegerField()
    additional_notes = models.JSONField()
    status = models.CharField(max_length=100, choices=INVENTORY_LOG_STATUS, default='Inwarded')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_inventory_log')
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_id_inventory_log')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)